Word Search

Given an m x n grid of characters board and a string word, return true if word exists in the grid.

The word can be constructed from letters of sequentially adjacent cells, where adjacent cells are horizontally or vertically neighboring. The same letter cell may not be used more than once.






class Solution {
public:
    int m,n,N;

    vector<vector<int>> dir = {{0,1},{1,0},{-1,0},{0,-1}};
    bool solve(vector<vector<char>>& B,string target,int i,int j,int I){
        if(i<0 || j<0 || i>=m || j>=n || target[I]!=B[i][j] || B[i][j]=='0'){
            return false;
        }
        if(I == N-1){
            return true;
        }
        
        bool isFound = false;
        char data = B[i][j]; 
        B[i][j] = '0';

        for(vector<int>& v : dir){
            int i_ = v[0];
            int j_ = v[1];
            isFound = isFound || solve(B,target,i+i_,j+j_,I+1);
        }

        B[i][j] = data;
        return isFound;
    }

    bool exist(vector<vector<char>>& B, string target) {
        this->m = B.size();
        this->n = B[0].size();
        this->N = target.length();

        bool isPresent = false;
        
        for(int i=0;i<m;i++){
            for(int j=0;j<n;j++){
                if(target[0] == B[i][j]){
                    isPresent = isPresent || solve(B,target,i,j,0);
                    if(isPresent==true){
                        break;
                    }
                }
            }
        }
        
        return isPresent;
    }
};
