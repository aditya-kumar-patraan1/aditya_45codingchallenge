4Sum
Given an array nums of n integers, return an array of all the unique quadruplets [nums[a], nums[b], nums[c], nums[d]] such that:

0 <= a, b, c, d < n
a, b, c, and d are distinct.
nums[a] + nums[b] + nums[c] + nums[d] == target
You may return the answer in any order.


class Solution {
public:
    vector<vector<int>> fourSum(vector<int>& A, int k) {
        vector<vector<int>> result;
        sort(begin(A),end(A));
        int n = A.size();

        for(int i=0;i<n;i++){
            while(i>0 && i<n && A[i-1]==A[i]){
                i++;
            }
            for(int j=i+1;j<n;j++){
                long long rem = (long long)k - (long long)(A[i]+A[j]);
                int I=j+1,J=n-1;
                while(I<J){
                    long long val = (long long)A[I]+(long long)A[J];
                    if(val==rem){
                        result.push_back({A[i],A[j],A[I],A[J]});
                        I++,J--;
                    }
                    else if(val>rem){
                        J--;
                    }
                    else{
                        I++;
                    }
                }
            }
        }

        set<vector<int>> st(begin(result),end(result));
        vector<vector<int>> finalA(begin(st),end(st));
        return finalA;
    }
};
